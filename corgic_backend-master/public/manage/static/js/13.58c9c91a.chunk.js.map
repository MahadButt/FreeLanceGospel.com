{"version":3,"sources":["utils/consts.js","utils/axiosInstance.js","pages/Stats/ContactMsg.js","pages/Stats/Stats.js"],"names":["msgStatus","UNREAD","READ","siteStatusLiteral","NORMAL","MAINTENANCE","LOCKDOWN","userStatus","PENDING","ACTIVE","DISABLED","S3_BASE","API_ROOT","instance","axios","create","baseURL","ContactMsg","props","token","useState","msgs","setMsgs","msgType","setMsgType","selectedMsg","setSelectedMsg","msgModalOpen","setMsgModalOpen","setMsgLoaded","activePage","setActivePage","pageCount","setPageCount","useEffect","a","offset","get","headers","Authorization","data","Math","floor","count","console","log","loadMessages","openMessage","index","patch","id","status","updatedMsgs","className","Modal","open","onClose","Header","name","email","Content","Description","style","fontSize","lineHeight","message","Actions","moment","created_at","fromNow","size","dividing","Button","Group","marginBottom","floated","onClick","Or","Table","celled","Row","HeaderCell","Body","length","map","msg","key","Cell","Label","color","primary","compact","Footer","colSpan","Pagination","firstItem","lastItem","prevItem","nextItem","totalPages","onPageChange","event","Loader","active","inline","Stats","auth","useContext","AuthContext","stats","setStats","pageLoaded","setPageLoaded","admin","loadStats","Grid","stackable","columns","Column","Segment","as","Icon","userCount","storyCount","forumCount"],"mappings":"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","file":"static/js/13.58c9c91a.chunk.js","sourcesContent":["\r\nexport const msgStatus = {\r\n    UNREAD: 0,\r\n    READ: 1\r\n}\r\n\r\nexport const siteStatusLiteral = {\r\n    NORMAL: 1,\r\n    MAINTENANCE: 2,\r\n    LOCKDOWN: 3\r\n}\r\n\r\nexport const userStatus = {\r\n    PENDING: 0,\r\n    ACTIVE: 1,\r\n    DISABLED: 2\r\n}\r\n\r\nconst dev = \"http://localhost:5000/\";\r\nconst prod = \"https://thegospelpage.com/\";\r\n\r\nexport const S3_BASE = \"https://library-cdn.s3-us-west-1.amazonaws.com\";\r\n\r\nexport const API_ROOT = prod;","import axios from \"axios\";\r\nimport { API_ROOT } from \"./consts\";\r\n\r\nconst instance = axios.create({ baseURL: `${API_ROOT}api` });\r\n\r\nexport default instance;","import React, { useState, useEffect, Fragment } from \"react\";\r\nimport { Header, Label, Button, Table, Modal, Pagination, Loader } from \"semantic-ui-react\";\r\nimport axios from \"../../utils/axiosInstance\";\r\nimport moment from \"moment\";\r\n\r\nimport { msgStatus } from \"../../utils/consts\";\r\n\r\nconst ContactMsg = (props) => {\r\n\r\n    const MSG_LIMIT = 10;\r\n\r\n    const { token } = props;\r\n\r\n    const [msgs, setMsgs] = useState(null);\r\n    const [msgType, setMsgType] = useState(msgStatus.UNREAD);\r\n    const [selectedMsg, setSelectedMsg] = useState(null);\r\n    const [msgModalOpen, setMsgModalOpen] = useState(false);\r\n    const [msgLoaded, setMsgLoaded] = useState(false);\r\n\r\n    const [activePage, setActivePage] = useState(0);\r\n    const [pageCount, setPageCount] = useState(null);\r\n\r\n    useEffect(() => {\r\n\r\n        async function loadMessages() {\r\n            \r\n            try {\r\n\r\n                let offset = 0;\r\n\r\n                if (activePage !== 0 && activePage !== 1) {\r\n                    offset = activePage * MSG_LIMIT;\r\n                }\r\n\r\n                const { data } = await axios.get(\r\n                    `/admin/contact/?status=${msgType}&limit=${MSG_LIMIT}&offset=${offset}`, \r\n                    { headers: { Authorization: `Bearer ${token}` } }\r\n                );\r\n\r\n                setMsgs(data.msgs);\r\n                setPageCount(Math.floor(data.count / MSG_LIMIT));\r\n                setMsgLoaded(true);\r\n                \r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        }\r\n\r\n        loadMessages();\r\n\r\n    }, [msgType]);\r\n\r\n    const handlePageChange = (event, { activePage }) => setActivePage(activePage);\r\n\r\n    const openMessage = async (index) => {\r\n\r\n        try {\r\n            \r\n            setSelectedMsg(msgs[index]);\r\n            setMsgModalOpen(true);\r\n\r\n            const result = await axios.patch(\r\n                `/admin/contact-status/${msgs[index].id}`, \r\n                { status: msgStatus.READ },\r\n                { headers: { Authorization: `Bearer ${token}` } }\r\n            );\r\n\r\n            if (result) {\r\n\r\n                const updatedMsgs = [...msgs];\r\n                updatedMsgs[index].status = msgStatus.READ;\r\n\r\n                setMsgs(updatedMsgs);\r\n            }\r\n\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const handleCloseModal = () => {\r\n        setSelectedMsg(null);\r\n        setMsgModalOpen(false);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {\r\n                !msgs ? <Loader active inline size=\"large\" /> :\r\n                <div className=\"ContactMsg\">\r\n                    {\r\n                        selectedMsg && \r\n                        <Modal open={msgModalOpen} onClose={handleCloseModal}>\r\n                            <Modal.Header>\r\n                                {selectedMsg.name} ({selectedMsg.email})\r\n                            </Modal.Header>\r\n\r\n                            <Modal.Content>\r\n                                <Modal.Description>\r\n                                    <p\r\n                                        style={{\r\n                                            fontSize: \"18px\",\r\n                                            lineHeight: \"1.7\"\r\n                                        }}\r\n                                    >\r\n                                        {selectedMsg.message}\r\n                                    </p>\r\n                                </Modal.Description>\r\n                            </Modal.Content>\r\n\r\n                            <Modal.Actions>\r\n                                <span className=\"util-bold\">\r\n                                    Received: {moment(selectedMsg.created_at).fromNow()}\r\n                                </span>\r\n                            </Modal.Actions>\r\n                        </Modal>\r\n                    }\r\n                    \r\n                    <Header size=\"huge\" dividing>\r\n                        Messages\r\n                    </Header>\r\n\r\n                    <div>\r\n                        <Button.Group style={{ marginBottom: \"20px\" }} floated=\"right\">\r\n                            <Button onClick={() => setMsgType(msgStatus.UNREAD)}>Unread</Button>\r\n                            <Button.Or />\r\n                            <Button onClick={() => setMsgType(msgStatus.READ)}>Read</Button>\r\n                        </Button.Group>\r\n                        <Table celled>\r\n                            <Table.Header>\r\n                                <Table.Row>\r\n                                    <Table.HeaderCell>Name</Table.HeaderCell>\r\n                                    <Table.HeaderCell>Email</Table.HeaderCell>\r\n                                    <Table.HeaderCell>Status</Table.HeaderCell>\r\n                                    <Table.HeaderCell>Action</Table.HeaderCell>\r\n                                </Table.Row>\r\n                            </Table.Header>\r\n\r\n                            <Table.Body>\r\n                                {\r\n                                    msgs.length > 0 ?\r\n                                    msgs.map((msg, index) => (\r\n                                        <Table.Row key={msg.id}>\r\n                                            <Table.Cell>{msg.name}</Table.Cell>\r\n                                            <Table.Cell>{msg.email}</Table.Cell>\r\n                                            <Table.Cell>\r\n                                                {\r\n                                                    msg.status === msgStatus.UNREAD ?\r\n                                                    <Label color=\"red\">Unread</Label> :\r\n                                                    <Label color=\"green\">Read</Label>\r\n                                                }\r\n                                            </Table.Cell>\r\n                                            <Table.Cell>\r\n                                                <Button \r\n                                                    primary \r\n                                                    compact\r\n                                                    onClick={() => openMessage(index)} \r\n                                                >\r\n                                                    Open\r\n                                                </Button>\r\n                                            </Table.Cell>\r\n                                        </Table.Row>\r\n                                    )) :\r\n                                    <Table.Row>\r\n                                        <Table.Cell>\r\n                                            No Unread Messages!\r\n                                        </Table.Cell>\r\n                                    </Table.Row>\r\n                                }\r\n                            </Table.Body>\r\n                            {\r\n                                pageCount > 1 &&\r\n                                <Table.Footer>\r\n                                    <Table.Row>\r\n                                        <Table.HeaderCell colSpan=\"3\">\r\n                                            <Pagination\r\n                                                firstItem={null}\r\n                                                lastItem={null}\r\n                                                prevItem={null}\r\n                                                nextItem={null}\r\n                                                activePage={activePage}\r\n                                                totalPages={pageCount}\r\n                                                onPageChange={handlePageChange}\r\n                                            />\r\n                                        </Table.HeaderCell>\r\n                                    </Table.Row>\r\n                                </Table.Footer>\r\n                            }\r\n                        </Table>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default ContactMsg;","import React, { useEffect, useContext, useState } from \"react\";\r\nimport { Segment, Grid, Header, Icon, Loader } from \"semantic-ui-react\";\r\nimport axios from \"../../utils/axiosInstance\";\r\n\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\n\r\nimport ContactMsg from \"./ContactMsg\";\r\n\r\nimport \"./Stats.scss\";\r\n\r\nconst Stats = (props) => {\r\n\r\n    const auth = useContext(AuthContext);\r\n\r\n    const [stats, setStats] = useState([]);\r\n    const [pageLoaded, setPageLoaded] = useState([]);\r\n\r\n    useEffect(() => {\r\n\r\n        async function loadStats() {\r\n            \r\n            try {\r\n\r\n                const { data } = await axios.get(\r\n                    \"/admin/stats\", \r\n                    { headers: { Authorization: `Bearer ${auth.admin.token}` } }\r\n                );\r\n\r\n                setStats(data);\r\n                setPageLoaded(true);\r\n                \r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        }\r\n\r\n        loadStats();\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"Stats padded-content\">\r\n            <Header size=\"huge\" dividing>\r\n                Site Stats\r\n            </Header>\r\n            {\r\n                !pageLoaded ? <Loader size=\"medium\" active /> :\r\n                <Grid stackable columns=\"3\">\r\n                    <Grid.Column>\r\n                        <Segment>\r\n                            <Header as=\"h2\" size=\"medium\">\r\n                                <Icon name=\"users\" />\r\n                                <Header.Content>{stats.userCount} Users</Header.Content>\r\n                            </Header>\r\n                        </Segment>\r\n                    </Grid.Column>\r\n                    <Grid.Column>\r\n                        <Segment>\r\n                            <Header as=\"h2\" size=\"medium\">\r\n                                <Icon name=\"book\" />\r\n                                <Header.Content>{stats.storyCount} Stories</Header.Content>\r\n                            </Header>\r\n                        </Segment>\r\n                    </Grid.Column>\r\n                    <Grid.Column>\r\n                        <Segment>\r\n                            <Header as=\"h2\" size=\"medium\">\r\n                                <Icon name=\"discussions icon\" />\r\n                                <Header.Content>{stats.forumCount} Forum Posts</Header.Content>\r\n                            </Header>\r\n                        </Segment>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            }\r\n\r\n            <div className=\"Stats--msg\">\r\n                <ContactMsg token={auth.admin.token} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Stats;"],"sourceRoot":""}