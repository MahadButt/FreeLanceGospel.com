{"version":3,"sources":["shared/context/auth-context.js","shared/context/theme-context.js","components/Navbar/Navbar.js","layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","createContext","isLoggedIn","admin","login","logout","AuthContextProvider","props","useState","setAdmin","setIsLoggedIn","history","useHistory","useEffect","JSON","parse","localStorage","getItem","token","removeItem","useCallback","redirect","setItem","stringify","push","Provider","value","children","ThemeContext","theme","ThemeContextProvider","isMobile","window","innerWidth","Responsive","onlyMobile","maxWidth","minWidth","isTab","onlyTablet","isComputer","onlyComputer","Navbar","auth","useContext","className","style","flex","overflowY","Menu","borderRadius","height","fluid","inverted","vertical","borderless","compact","Item","Header","as","Link","to","icon","content","padding","Button","negative","onClick","withRouter","autoClose","Grid","Column","width","Login","React","lazy","Stats","Settings","Users","Library","Blogs","allowedRoutes","exact","path","component","Suspense","fallback","Loader","size","active","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d441d90b.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback, createContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const AuthContext = createContext({\r\n    isLoggedIn: false,\r\n    admin: null,\r\n    login: () => {},\r\n    logout: () => {}\r\n});\r\n\r\nexport const AuthContextProvider = (props) => {\r\n\r\n    const [admin, setAdmin] = useState(null);\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n\r\n        const admin = JSON.parse(localStorage.getItem(\"admin\"));\r\n\r\n        if (admin && admin.token) {\r\n\r\n            login(admin, false);\r\n\r\n        } else {\r\n\r\n            localStorage.removeItem(\"admin\");\r\n\r\n            setAdmin(null);\r\n            setIsLoggedIn(false);\r\n        }\r\n\r\n    }, []);\r\n\r\n    const login = useCallback((admin, redirect) => {\r\n\r\n        localStorage.setItem(\"admin\", JSON.stringify(admin));\r\n        setAdmin(admin);\r\n        setIsLoggedIn(true);\r\n\r\n        if (redirect) {\r\n            history.push(\"/\");\r\n        }\r\n\r\n    }, []);\r\n\r\n    const logout = useCallback(() => {\r\n\r\n        localStorage.removeItem(\"admin\");\r\n\r\n        setAdmin(null);\r\n        setIsLoggedIn(false);\r\n\r\n        history.push(\"/\");\r\n\r\n    }, []);\r\n    \r\n    return (\r\n        <AuthContext.Provider \r\n            value={{\r\n                isLoggedIn,\r\n                admin,\r\n                login,\r\n                logout,\r\n            }}\r\n        >\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    );\r\n}","import React, { createContext, useState } from \"react\";\r\nimport { Responsive } from \"semantic-ui-react\";\r\n\r\nexport const ThemeContext = createContext({\r\n    theme: {},\r\n});\r\n\r\nexport const ThemeContextProvider = (props) => {\r\n\r\n    const [theme] = useState({\r\n        isMobile: window.innerWidth <= Responsive.onlyMobile.maxWidth && window.innerWidth >= Responsive.onlyMobile.minWidth,\r\n        isTab: window.innerWidth <= Responsive.onlyTablet.maxWidth && window.innerWidth >= Responsive.onlyTablet.minWidth,\r\n        isComputer: window.innerWidth >= Responsive.onlyComputer.minWidth,\r\n\t});\r\n    \r\n    return (\r\n        <ThemeContext.Provider \r\n            value={{ \r\n                theme,\r\n            }}\r\n        >\r\n            {props.children}\r\n        </ThemeContext.Provider>\r\n    );\r\n}","import React, { useContext } from \"react\";\r\nimport { Menu, Button } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\n\r\nimport \"./Navbar.scss\";\r\n\r\nconst Navbar = () => {\r\n\r\n    const auth = useContext(AuthContext);\r\n\r\n    return (\r\n        <div className=\"fixed-menu\">\r\n            <div style={{ flex: 1, overflowY: \"scroll\" }}>\r\n                <Menu \r\n                    style={{ borderRadius: \"0px\", height: \"100%\" }} \r\n                    fluid \r\n                    inverted \r\n                    vertical \r\n                    borderless \r\n                    compact\r\n                >\r\n                    <Menu.Item>\r\n                        <Menu.Header>\r\n                            The Church Book Admin Panel\r\n                        </Menu.Header>\r\n                    </Menu.Item>\r\n                    <Menu.Item \r\n                        as={Link}\r\n                        to=\"/\"\r\n                        icon=\"chart bar\"\r\n                        content=\"Statistics\"\r\n                    />\r\n                    <Menu.Item \r\n                        as={Link}\r\n                        to=\"/users\"\r\n                        icon=\"users\"\r\n                        content=\"Users\"\r\n                    />\r\n                    <Menu.Item \r\n                        as={Link}\r\n                        to=\"/blogs\"\r\n                        icon=\"book\"\r\n                        content=\"Stories\"\r\n                    />\r\n                    <Menu.Item \r\n                        as={Link}\r\n                        to=\"/library\"\r\n                        icon=\"book\"\r\n                        content=\"Library\"\r\n                    />\r\n                    <Menu.Item \r\n                        as={Link}\r\n                        to=\"/settings\"\r\n                        icon=\"settings\"\r\n                        content=\"Settings\"\r\n                    />\r\n                    \r\n                </Menu>\r\n            </div>\r\n            <div style={{ flex: \"0 0 auto\", padding: \"20px\" }}>\r\n                <Button fluid negative onClick={auth.logout}>LOGOUT</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React, { useContext } from \"react\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nimport Navbar from \"../components/Navbar/Navbar\";\r\n\r\nimport { AuthContext } from \"../shared/context/auth-context\";\r\n\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./Layout.scss\";\r\n\r\nconst Layout = (props) => {\r\n\r\n    const auth = useContext(AuthContext);\r\n\r\n    return (\r\n        <div className=\"Layout\">\r\n            <ToastContainer  autoClose={1500} />\r\n\r\n            <Grid>\r\n                <Grid.Column width=\"3\">\r\n                    {\r\n                        auth.isLoggedIn &&\r\n                        <div className=\"Layout--navbar\">\r\n                            <Navbar />\r\n                        </div>\r\n                    }\r\n                </Grid.Column>\r\n                <Grid.Column width={auth.isLoggedIn ? \"13\" : \"16\"}>\r\n                    <main className=\"Layout--body\">\r\n                        {props.children}\r\n                    </main>\r\n                </Grid.Column>\r\n            </Grid>\r\n            \r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(Layout);","import React, { useContext } from \"react\";\r\nimport { Switch, Route, withRouter } from \"react-router-dom\";\r\nimport { Loader } from \"semantic-ui-react\";\r\n\r\nimport Layout from \"./layout/Layout\";\r\n\r\nimport { AuthContext } from \"./shared/context/auth-context\";\r\n\r\nconst Login = React.lazy(() => import(\"./pages/Login/Login\"));\r\nconst Stats = React.lazy(() => import(\"./pages/Stats/Stats\"));\r\nconst Settings = React.lazy(() => import(\"./pages/Settings/Settings\"));\r\nconst Users = React.lazy(() => import(\"./pages/Users/Users\"));\r\nconst Library = React.lazy(() => import(\"./pages/Library/Library\"));\r\nconst Blogs = React.lazy(() => import(\"./pages/Blogs/Blogs\"));\r\n\r\nconst App = (props) => {\r\n\r\n    const { isLoggedIn } = useContext(AuthContext);\r\n\r\n    let allowedRoutes = (\r\n        <Switch>\r\n            <Route exact path=\"/\" component={Login} />\r\n        </Switch>\r\n    );\r\n    \r\n    if (isLoggedIn) {\r\n        \r\n        allowedRoutes = (\r\n            <Switch>\r\n                <Route exact path=\"/\" component={Stats} />\r\n                <Route exact path=\"/settings\" component={Settings} />\r\n                <Route exact path=\"/users\" component={Users} />\r\n                <Route exact path=\"/blogs\" component={Blogs} />\r\n                <Route exact path=\"/library\" component={Library} />\r\n            </Switch>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Layout>\r\n            <React.Suspense fallback={<Loader size=\"massive\" active />}>\r\n                {allowedRoutes}\r\n            </React.Suspense>\r\n        </Layout>\r\n    );\r\n}\r\n\r\nexport default withRouter(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nimport { AuthContextProvider } from \"./shared/context/auth-context\";\r\nimport { ThemeContextProvider } from \"./shared/context/theme-context\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport \"./index.scss\";\r\n\r\nReactDOM.render((\r\n    <Router>\r\n        <AuthContextProvider>\r\n            <ThemeContextProvider>\r\n                <App />\r\n            </ThemeContextProvider>\r\n        </AuthContextProvider>\r\n    </Router>\r\n), document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}