{"version":3,"sources":["utils/consts.js","utils/axiosInstance.js","pages/Login/Login.js"],"names":["msgStatus","UNREAD","READ","siteStatusLiteral","NORMAL","MAINTENANCE","LOCKDOWN","userStatus","PENDING","ACTIVE","DISABLED","S3_BASE","API_ROOT","instance","axios","create","baseURL","Login","auth","useContext","AuthContext","schema","yup","shape","email","required","password","min","handleSubmit","values","fr","a","post","data","loginSuccess","setSubmitting","login","u_id","token","toast","error","msg","console","log","textAlign","style","height","verticalAlign","Column","maxWidth","as","color","stacked","initialValues","validationSchema","onSubmit","className","fluid","type","name","onChange","handleChange","onBlur","handleBlur","icon","iconPosition","placeholder","errors","touched","size","disabled","isSubmitting","loading"],"mappings":"6GACA,0KAAO,IAAMA,EAAY,CACrBC,OAAQ,EACRC,KAAM,GAGGC,EAAoB,CAC7BC,OAAQ,EACRC,YAAa,EACbC,SAAU,GAGDC,EAAa,CACtBC,QAAS,EACTC,OAAQ,EACRC,SAAU,GAMDC,EAAU,iDAEVC,EAJA,8B,iCCnBb,+BAGMC,EAAWC,IAAMC,OAAO,CAAEC,QAAQ,GAAD,OAAKJ,IAAL,SAExBC,O,+KC4GAI,UAxGD,WAEV,IAAMC,EAAOC,qBAAWC,KAOlBC,EAASC,MAAaC,MAAM,CAC9BC,MAAOF,MAAaE,MAAM,iBAAiBC,SAAS,sBACpDC,SAAUJ,MAAaK,IAAI,EAAG,+CAA+CF,SAAS,2BAGpFG,EAAY,uCAAG,WAAOC,EAAQC,GAAf,iBAAAC,EAAA,+EAIWjB,IAAMkB,KAAK,iBAAkBH,GAJxC,iBAILI,EAJK,EAILA,MAECC,cAELJ,EAAGK,eAAc,GAEjBjB,EAAKkB,MAAM,CACPC,KAAMJ,EAAKI,KACXb,MAAOS,EAAKT,MACZc,MAAOL,EAAKK,QACb,KAGHR,EAAGK,eAAc,GACjBI,IAAMC,MAAMP,EAAKQ,MAlBR,gDAsBbC,QAAQC,IAAR,MAtBa,yDAAH,wDA0BlB,OACI,kBAAC,IAAD,CAAMC,UAAU,SAASC,MAAO,CAAEC,OAAQ,SAAWC,cAAc,UAC/D,kBAAC,IAAKC,OAAN,CAAaH,MAAO,CAAEI,SAAU,MAC5B,kBAAC,IAAD,CAAQC,GAAG,KAAKC,MAAM,QAAtB,yBAGI,kBAAC,IAAD,CAASC,SAAO,GACZ,kBAAC,IAAD,CACIC,cA5CF,CAClB7B,MAAO,GACPE,SAAU,IA2CU4B,iBAAkBjC,EAClBkC,SAAU3B,IAET,SAACE,GAAD,OACG,kBAAC,IAAD,KACI,yBAAK0B,UAAU,kBACX,kBAAC,IAAD,CACIC,OAAK,EACLC,KAAK,QACLC,KAAK,QACLC,SAAU9B,EAAG+B,aACbC,OAAQhC,EAAGiC,WACXC,KAAK,OACLC,aAAa,OACbC,YAAY,qBAEhB,uBAAGV,UAAU,qBACR1B,EAAGqC,OAAO3C,OAASM,EAAGsC,QAAQ5C,OAASM,EAAGqC,OAAO3C,QAG1D,yBAAKgC,UAAU,kBACX,kBAAC,IAAD,CACIC,OAAK,EACLC,KAAK,WACLC,KAAK,WACLC,SAAU9B,EAAG+B,aACbC,OAAQhC,EAAGiC,WACXC,KAAK,OACLC,aAAa,OACbC,YAAY,wBAEhB,uBAAGV,UAAU,qBACR1B,EAAGqC,OAAOzC,UAAYI,EAAGsC,QAAQ1C,UAAYI,EAAGqC,OAAOzC,WAIhE,kBAAC,IAAD,CACIgC,KAAK,SACLP,MAAM,OACNM,OAAK,EACLY,KAAK,QACLC,SAAUxC,EAAGyC,eAAiBzC,EAAGD,OAAOL,QAAUM,EAAGD,OAAOH,SAC5D8C,QAAS1C,EAAGyC,cANhB","file":"static/js/15.7321a32b.chunk.js","sourcesContent":["\r\nexport const msgStatus = {\r\n    UNREAD: 0,\r\n    READ: 1\r\n}\r\n\r\nexport const siteStatusLiteral = {\r\n    NORMAL: 1,\r\n    MAINTENANCE: 2,\r\n    LOCKDOWN: 3\r\n}\r\n\r\nexport const userStatus = {\r\n    PENDING: 0,\r\n    ACTIVE: 1,\r\n    DISABLED: 2\r\n}\r\n\r\nconst dev = \"http://localhost:5000/\";\r\nconst prod = \"https://thegospelpage.com/\";\r\n\r\nexport const S3_BASE = \"https://library-cdn.s3-us-west-1.amazonaws.com\";\r\n\r\nexport const API_ROOT = prod;","import axios from \"axios\";\r\nimport { API_ROOT } from \"./consts\";\r\n\r\nconst instance = axios.create({ baseURL: `${API_ROOT}api` });\r\n\r\nexport default instance;","import React, { useContext } from \"react\";\r\nimport axios from \"../../utils/axiosInstance\";\r\nimport { Button, Input, Grid, Header, Segment } from \"semantic-ui-react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { toast } from \"react-toastify\";\r\nimport * as yup from \"yup\";\r\n\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\n\r\nconst Login = () => {\r\n\r\n    const auth = useContext(AuthContext);\r\n\r\n    const initialValues = {\r\n        email: \"\",\r\n        password: \"\"\r\n    };\r\n\r\n    const schema = yup.object().shape({\r\n        email: yup.string().email(\"Invalid Email\").required(\"Email is required!\"),\r\n        password: yup.string().min(6, \"Password must be at least 6 characters long\").required(\"Password is required!\"),\r\n    });\r\n\r\n    const handleSubmit = async (values, fr) => {\r\n\r\n        try {\r\n\r\n            const { data } =  await axios.post(\"/admin/sign-in\", values);\r\n\r\n            if (data.loginSuccess) {\r\n\r\n                fr.setSubmitting(false);\r\n    \r\n                auth.login({\r\n                    u_id: data.u_id,\r\n                    email: data.email,\r\n                    token: data.token,\r\n                }, true);\r\n        \r\n            } else {\r\n                fr.setSubmitting(false);\r\n                toast.error(data.msg);\r\n            }\r\n            \r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid textAlign=\"center\" style={{ height: \"100vh\" }} verticalAlign=\"middle\">\r\n            <Grid.Column style={{ maxWidth: 450 }}>\r\n                <Header as=\"h2\" color=\"blue\">\r\n                    Login to your account\r\n                </Header>\r\n                    <Segment stacked>\r\n                        <Formik\r\n                            initialValues={initialValues}\r\n                            validationSchema={schema}\r\n                            onSubmit={handleSubmit}\r\n                        >\r\n                            {(fr) => (\r\n                                <Form>\r\n                                    <div className=\"accounts-input\">\r\n                                        <Input \r\n                                            fluid \r\n                                            type=\"email\"\r\n                                            name=\"email\"\r\n                                            onChange={fr.handleChange}\r\n                                            onBlur={fr.handleBlur}\r\n                                            icon=\"user\" \r\n                                            iconPosition=\"left\" \r\n                                            placeholder=\"Enter your email\" \r\n                                        />\r\n                                        <p className=\"input-field-error\">\r\n                                            {fr.errors.email && fr.touched.email && fr.errors.email}\r\n                                        </p>\r\n                                    </div>\r\n                                    <div className=\"accounts-input\">\r\n                                        <Input\r\n                                            fluid\r\n                                            type=\"password\"\r\n                                            name=\"password\"\r\n                                            onChange={fr.handleChange}\r\n                                            onBlur={fr.handleBlur}\r\n                                            icon=\"lock\"\r\n                                            iconPosition=\"left\"\r\n                                            placeholder=\"Enter your password\"\r\n                                        />\r\n                                        <p className=\"input-field-error\">\r\n                                            {fr.errors.password && fr.touched.password && fr.errors.password}\r\n                                        </p>\r\n                                    </div>\r\n\r\n                                    <Button \r\n                                        type=\"submit\" \r\n                                        color=\"blue\" \r\n                                        fluid \r\n                                        size=\"large\"\r\n                                        disabled={fr.isSubmitting || !fr.values.email || !fr.values.password}\r\n                                        loading={fr.isSubmitting}\r\n                                    >\r\n                                        Login\r\n                                    </Button>\r\n                                </Form>\r\n                            )}\r\n                        </Formik>\r\n                    </Segment>\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default Login;"],"sourceRoot":""}